Index: impl/src/main/java/org/kuali/rice/kew/service/impl/DocumentTypeResponsibilityTypeServiceImpl.java
===================================================================
--- impl/src/main/java/org/kuali/rice/kew/service/impl/DocumentTypeResponsibilityTypeServiceImpl.java	(revision 23703)
+++ impl/src/main/java/org/kuali/rice/kew/service/impl/DocumentTypeResponsibilityTypeServiceImpl.java	(revision 23704)
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.log4j.Logger;
 import org.kuali.rice.kew.doctype.service.DocumentTypeService;
 import org.kuali.rice.kew.service.KEWServiceLocator;
 import org.kuali.rice.kim.bo.impl.KimAttributes;
@@ -33,6 +34,7 @@
  */
 public class DocumentTypeResponsibilityTypeServiceImpl extends
 		KimResponsibilityTypeServiceBase {
+	private static final Logger LOG = Logger.getLogger(DocumentTypeResponsibilityTypeServiceImpl.class);
 	DocumentTypeService documentTypeService;
 	protected String exactMatchStringAttributeName;
 
@@ -47,43 +49,28 @@
 			List<KimResponsibilityInfo> responsibilitiesList) {
 		Map<String, List<KimResponsibilityInfo>> potentialDocumentTypeMatches = new HashMap<String, List<KimResponsibilityInfo>>();
 		for (KimResponsibilityInfo responsibility : responsibilitiesList) {
-            System.out.println("Looking for responsibility " + responsibility);
-            System.out.println("Getting details for " + exactMatchStringAttributeName);
-			if ((exactMatchStringAttributeName == null)
-					|| responsibility
-							.getDetails()
-							.get(exactMatchStringAttributeName)
-							.equals(
-									requestedDetails
-											.get(exactMatchStringAttributeName))) {
-				if (!potentialDocumentTypeMatches.containsKey(responsibility
-						.getDetails().get(KimAttributes.DOCUMENT_TYPE_NAME))) {
+            LOG.info("Looking for responsibility " + responsibility);
+            LOG.info("Getting details for " + exactMatchStringAttributeName);
+			if ((exactMatchStringAttributeName == null) ||
+					responsibility.getDetails().get(exactMatchStringAttributeName)
+					   .equals(requestedDetails.get(exactMatchStringAttributeName))) {
+				if (!potentialDocumentTypeMatches.containsKey(responsibility.getDetails().get(KimAttributes.DOCUMENT_TYPE_NAME))) {
 					potentialDocumentTypeMatches.put(
-							responsibility.getDetails().get(
-									KimAttributes.DOCUMENT_TYPE_NAME),
-							new ArrayList<KimResponsibilityInfo>());
+						responsibility.getDetails().get(KimAttributes.DOCUMENT_TYPE_NAME),
+						new ArrayList<KimResponsibilityInfo>());
 				}
-				potentialDocumentTypeMatches.get(
-						responsibility.getDetails().get(
-								KimAttributes.DOCUMENT_TYPE_NAME)).add(
-						responsibility);
+				potentialDocumentTypeMatches.get(responsibility.getDetails().get(KimAttributes.DOCUMENT_TYPE_NAME)).add(responsibility);
 			}
 		}
 		List<KimResponsibilityInfo> matchingResponsibilities = new ArrayList<KimResponsibilityInfo>();
-		if (potentialDocumentTypeMatches.containsKey(requestedDetails
-				.get(KimAttributes.DOCUMENT_TYPE_NAME))) {
-			matchingResponsibilities
-					.addAll(potentialDocumentTypeMatches.get(requestedDetails
-							.get(KimAttributes.DOCUMENT_TYPE_NAME)));
+		if (potentialDocumentTypeMatches.containsKey(requestedDetails.get(KimAttributes.DOCUMENT_TYPE_NAME))) {
+			matchingResponsibilities.addAll(potentialDocumentTypeMatches.get(requestedDetails.get(KimAttributes.DOCUMENT_TYPE_NAME)));
 		} else {
 			String closestParentDocumentTypeName = KimCommonUtils.getClosestParentDocumentTypeName(
-					getDocumentTypeService().findByName(
-							requestedDetails
-									.get(KimAttributes.DOCUMENT_TYPE_NAME)),
+				getDocumentTypeService().findByName(requestedDetails.get(KimAttributes.DOCUMENT_TYPE_NAME)),
 					potentialDocumentTypeMatches.keySet());
 			if (closestParentDocumentTypeName != null) {
-				matchingResponsibilities.addAll(potentialDocumentTypeMatches
-						.get(closestParentDocumentTypeName));
+				matchingResponsibilities.addAll(potentialDocumentTypeMatches.get(closestParentDocumentTypeName));
 			}
 		}
 		return matchingResponsibilities;
